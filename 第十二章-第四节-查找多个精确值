	短语过滤器在查到单个值得时候很好用，但是有时会有搜索多个值得需求，比如查找价钱是20或者30的文档。
	可以使用单个短语过滤器来实现这个功能，只要使用短语过滤器的复数版本就可以了，它和平常的短语过滤器几乎一模一样，只是参数形式变成了数组：
	GET /my_store/products/_search
	{
	    "query" : {
	        "filtered" : {
	            "filter" : {
	                "terms" : { 
	                    "price" : [20, 30]
	                }
	            }
	        }
	    }
	}
	响应如下：
	"hits" : [
	    {
	        "_id" :    "2",
	        "_score" : 1.0,
	        "_source" : {
	          "price" :     20,
	          "productID" : "KDKE-B-9947-#kL5"
	        }
	    },
	    {
	        "_id" :    "3",
	        "_score" : 1.0,
	        "_source" : {
	          "price" :     30,
	          "productID" : "JODL-X-1937-#pV7"
	        }
	    },
	    {
	        "_id":     "4",
	        "_score":  1.0,
	        "_source": {
	           "price":     30,
	           "productID": "QQPX-R-3956-#aD8"
	        }
	     }
	]
	短语过滤器是包含操作，而不是相等操作。
	对于过滤器 { "term" : { "tags" : "search" } }，以下两个文档都是匹配的：
	{ "tags" : ["search"] }
	{ "tags" : ["search", "open_source"] } 
	回忆一下短语过滤器是怎么工作的：它先检查反向索引找出包含短语的文档，然后建立一个位集合，在如下反向索引中：
	Token					DocIDs

	open_source				2

	search					1,2
	当短语过滤器执行查找标记 search的时候，它直接找到反向索引中关联的标记并且找到与之有联系的文档id，如表所示，文档1，和2都匹配。
	由反向索引本身可以发现如果要对字段做相等计算是很难的。那是什么决定了一个特定文档只包含请求中的短语呢？这比如通过查找反向索引中的短语，获取文档id，然后扫描反向索引中的每一行，然后查看这些文档中是否有包含其他的短语。看起来这样的操作将会是很消耗性能的。所以短语过滤器是包含操作，而不是完全相等。
	如果你想要达到完全相等的判断，最好的办法就是额外索引一个字段。在这个字段中，索引这个字段包含的值得数量，比如对之前的两个文档做这样的修改：
	{ "tags" : ["search"], "tag_count" : 1 }
	{ "tags" : ["search", "open_source"], "tag_count" : 2 }
	一旦有了这个计数的字段，就可以建立一个bool过滤器来强制短语的个数：
	GET /my_index/my_type/_search
	{
	    "query": {
	        "filtered" : {
	            "filter" : {
	                 "bool" : {
	                    "must" : [
	                        { "term" : { "tags" : "search" } }, 
	                        { "term" : { "tag_count" : 1 } } 
	                    ]
	                }
	            }
	        }
	    }
	}
