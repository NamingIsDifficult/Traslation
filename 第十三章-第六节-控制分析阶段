	查询只能找到反向索引中有的短语，所以对搜索时的查询字串和索引时的文档所用的分析过程必须要一致，这样才能使得分词后的短语按照需要进行匹配。
	事实上，不管是通过配置特定分析器还是通过类型或者索引甚至是节点的默认配置，每个全文本字段都有自己的分析器。在索引阶段，字段的值会按照指定的分析器或者默认的分析器进行分析。
	比如：
	PUT /my_index/_mapping/my_type
	{
	    "my_type": {
	        "properties": {
	            "english_title": {
	                "type":     "string",
	                "analyzer": "english"
	            }
	        }
	    }
	}
	现在比对以下english_title字段和title字段，使用analyze API看看它们在索引的时候是怎么处理单词Foxes的：
	GET /my_index/_analyze?field=my_type.title   //使用基本分析器，返回foxes
	Foxes
	
	GET /my_index/_analyze?field=my_type.english_title //使用英语分析器，返回fox
	Foxes
	这意味着当运行底层短语查询查找精确的短语fox的时候，只有english_title会匹配
	高层的查询则会理解字段的映射表并且在对每个字段进行查询的时候使用正确的分析器。可以通过validate-query API查看：
	
	GET /my_index/my_type/_validate/query?explain
	{
	    "query": {
	        "bool": {
	            "should": [
	                { "match": { "title":         "Foxes"}},
	                { "match": { "english_title": "Foxes"}}
	            ]
	        }
	    }
	}
	返回的解释如下：
	(title:foxes english_title:fox)
	match查询对每个字段使用合适的分析器来使得每个短语在查询的时候格式是正确的。
	虽然可以在字段级别指定分析器，但是当没有指定分析器的时候，每个字段要如何决定使用哪种分析器呢？分析器可以在不同的层级里指定。Elasticsearch按照各个层级向下查找，直至找到一个可以使用的分析器。在索引的时候，顺序是这样的：
	1.定义在字段映射表的分析器
	2.定义在文档的_analyzer字段中的分析器
	3.该类型的默认分析器
	4.索引设置里名字是default的分析器
	5.节点设置里名字是default的分析器
	6.基本分析器
	查询的时候：
	1.定义在查询中的分析器
	2.定义在字段映射表的分析器
	3.该类型的默认分析器
	4.索引设置里名字是default的分析器
	5.节点设置里名字是default的分析器
	6.基本分析器
	1，2两条是查询和索引节点不同的地方。_analyzer字段允许你对每个文档设置一个默认的分析器(比如english,french,spanish),而查询阶段则允许在查询字串中指定使用何种分析器。但是，这都不是在一个索引中处理多语言的最佳方法，后续将会详细介绍。
	有些时候，在索引和查询的时候使用不同的分析器是有意义的。比如，在索引的时候希望索引同义词（如quick出现的时候，也可以索引为fast,rapid或者speedy）。但是搜索的时候，我们不想搜索这些同义词，而只是这些词中的某一个。
	为了达成这个功能，Elasticsearch也支持index_analyzer和search_analyzer参数，而且分析器的名字分别是default_index和default_search。
	这些额外的参数加入的话，索引的时候使用的分析器的完整顺序是：
	1.在字段映射表中定义的index_analyer分析器
	2.定义在字段映射表的分析器
	3.定义在文档的_analyzer字段中的分析器
	4.该类型的默认index_analyzer分析器
	5.该类型的默认分析器
	6.索引设置里名字是default_index的分析器
	7.索引设置里名字是default的分析器
	8.节点设置里名字是default_index的分析器
	9.节点设置里名字是default的分析器
	10.基本分析器
	查询时：
	1.定义在查询中的分析器
	2.定义在字段映射表的search_analyzer分析器
	3.定义在字段映射表的分析器
	4.该类型的默认search_analyzer分析器
	5.该类型的默认分析器
	6.索引设置里名字是default_search的分析器
	7.索引设置里名字是default的分析器
	8.节点设置里名字是default_search的分析器
	9.节点设置里名字是default的分析器
	10.基本分析器
	可以指定分析器的地方实在有点多，在实际应用中其实很简单。
	1.使用索引配置，不要对文档做配置
	首先要记住的是，即使你最开始只是使用Elasticsearch做一件事，比如记日志，可是时间一长，你可能会在集群里运行多个应用，每个索引都要相互独立，而且可以独立的配置。你必然不想对其做了一次默认配置后又一遍遍的去修改它。
	这就排除了在节点级别去做配置。此外，在节点级别配置分析器还需要对每个节点的配置文档做修改并且重启，这对于维护来说简直是噩梦。所以在保持Elasticsearch运行的情况下通过API来管理设置相比来说要好太多了。
	2.保持设置简单
	大多数情况下，你一早就知道文档里都有哪些字段，最简单的方法就是对每一个全文本字段都在创建索引或者添加映射的时候设置分析器。虽然这个方法略显冗长，但是可以让你很清晰的看到每个字段用的是何种分析器。
	这种方法在大多数字串字段都是not_analyzed精确值字段，比如标签或枚举，再加上少数使用默认分析器(standard,english等)的全文本字段的时候是一种非常典型的应用。如果其中还有一两个需要自定义分析器的字段：可能title字段需要被索引为支持find-as-you-type.
	你可在索引中设置对于大多数全文本字段都使用的默认分析器，而只对部分需要特别的分析器的字段使用指定的分析器。如果需要对每个类型都使用不同于默认制定的分析器的话，就在类型层级配置相应的分析器。
	对于基于时间的数据，比如日志而言，通常使用的方法是对于每个日期都创建一个索引。这个工作流程使得你无法预先创建索引，这是可以使用index templates来指定设置和映射。
