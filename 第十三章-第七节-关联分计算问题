	这里解释一下之前测试时只设置一个基本分片的原因。
	偶尔有用户会提交这样的事件：通过关联分排序失效了，用户索引了一些文档，然后运行一个简单的查询，结果中有时会出现关联程度较低的文档反而排在前面。
	在解释原因之前，先假设创建了一个有两个基本分片的索引，并且索引10个文档，6个有单词foo。有可能的文档分布是这样的：分片1有3个包含foo的文档，分片2也有3个。换句话说，分布很均匀。关联分计算的默认相似算法是tf/idf。idf计算的时候，处于性能上的考虑，并不会把整个索引中的文档作为基数来计算，而只是计算本分片里的文档。当文档分布均匀的时候，并没有什么问题。可是如果5个带foo的文档在分片1，1个在分片2，那么不同分片计算出来的idf是不同的，因为foo在分片1出现的频率远高于分片2，这对于关联分的计算影响很大。
	在实际应用中，这个问题不会出现，因为本地分片和全局索引的idf差异随着索引中的文档的数量增长慢慢消失，所以问题关键并不在于关联算法错误，而在于索引中是否有足够多的文档。当测试阶段缺少文档的时候，可以通过创建只有一个基本分片的索引或者添加?search_type=dfs_query_then_fetch参数来解决，不过在生产环境切记不要使用这个参数，首先没有必要，其次这个参数会在计算idf的时候先去获取所有分片的idf来计算全局idf，这对性能来说负担太大。
