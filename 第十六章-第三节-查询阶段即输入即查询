	让我们看看前缀匹配如何在全文本查询中使用。用户们习惯于在结束输入完整的查询之前就看到搜索结果，即所谓的即输入即查询。这不单单可以使得用户更快的获得查询结果，也可以用于引导用户查找索引中有的数据。
	举个例子，如果用户输入johnnie walker bl，我们可能会在用户输入完成之前展示Johnnie Walker Black Label 和 Johnnie Walker Blue Label的结果。大部分情况下，都有很多解决办法，我们先从最简单的方法开始。你不需要以任何方式预处理数据，可以在任意全文本字段上在查询阶段实现即输入即查询。在词组查询中，我们介绍了match_phrase查询，它可以按照指定单词的相关联位置的一致性进行查询。在查询阶段，即输入即查询可以使用特制的查询，叫做match_phrase_prefix：
	{
	    "match_phrase_prefix" : {
	        "brand" : "johnnie walker bl"
	    }
	}
	除了它会把查询字串的最后一个单词当作是前缀，这个查询和match_phrase查询的行为完全一致，换句话说，这个查询可以被解析为：
	1.johnnie
	2.之后是walker
	3.之后是开头是bl的单词
	如果通过validate-query API可以看到以下解释：
	"johnnie walker bl*"
	和match_phrase查询一样，它接受slop参数来使得单词的顺序和关联位置的限制不那么严格：
	{
	    "match_phrase_prefix" : {
	        "brand" : {
	            "query": "walker johnnie bl", 
	            "slop":  10
	        }
	    }
	}
	但是，总是只有最后面的那个单词会被当作是前缀。在前缀查询中我们警告了使用前缀查询带来的问题，它的性能与被查询的主体的量级大小负相关。这种情况对match_phrase_prefix也一样。一个a前缀可能会匹配数以千计的短语，这不单单对性能有影响，他对用户来说也是无用的。我们可以通过设置max_expansions到一个较合适的数量来限制前缀扩展的影响。
	{
	    "match_phrase_prefix" : {
	        "brand" : {
	            "query":          "johnnie walker bl",
	            "max_expansions": 50
	        }
	    }
	}
	这个参数限制了前缀可以匹配的短语的最大数量，它会找到第一个以bl开头的短语，然后一直收集到设置的最大值或者如果没有配置的话就会到最后一个匹配的短语。
	需要注意的是，每次用户键入一个字符的时候，这个查询都会运行一次，所以它要尽可能的快。如果第一组结果并不是用户要的，他们会一直输入直到获得想要的结果。
	
