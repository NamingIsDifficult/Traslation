	Elasticsearch使用一种叫做反向索引的结构，这种结构是设计用来支持快速的全文搜索的。一个反向索引由任意文档中出现过的不同的单词组成，对于每个单词，有一个列表列出出现过这个单词的文档。
	比如说有两个文档，每个都有content字段，其中包含以下信息：
	1，The quick brown fox jumped over the lazy dog
	2，Quick brown foxes leap over lazy dogs in summer
	为了创建一个反向索引，首先先将每个文档的content字段中的文本分割为单独的单词，这些单词被称为短语(terms)或标记(tokens)，对所有的短语创建一个排过序的列表，然后再列出每个文档中各个短语出现的次数，结果就像这样：
	Term      Doc_1  Doc_2
	-------------------------
	Quick   |       |  X
	The     |   X   |
	brown   |   X   |  X
	dog     |   X   |
	dogs    |       |  X
	fox     |   X   |
	foxes   |       |  X
	in      |       |  X
	jumped  |   X   |
	lazy    |   X   |  X
	leap    |       |  X
	over    |   X   |  X
	quick   |   X   |
	summer  |       |  X
	the     |   X   |
	------------------------
	现在，如果我们想搜索quick brown，我们只需要会找到每个短语出现的文档就可以了
	Term      Doc_1  Doc_2
	-------------------------
	brown   |   X   |  X
	quick   |   X   |
	------------------------
	Total   |   2   |  1
	两个文档都匹配，但是第一个文档匹配的数量更多。如果我们应用一个朴素的详细性算法的，即按照匹配数量排序的话，就会说第一个文档更加匹配查询。
	但是当前的反向索引有几个问题：
	Quick和quick是不同的短语，而我们把它们当作相同的单词。
	fox和foxed很相近，就和dog与dogs对比一样，它们的词根相同。
	jumped和leap虽然词根不同，但是意义相似，它们是同义词。
	通过前面的索引，一个搜索+Quick +fox的查询不会匹配到任意文档，因为+意味着要完全必配。Quick短语和fox短语都必须在文档中才能匹配查询，但是第一个文档包含quick fox而第二个文档包含Quick foxed。
	我们的用户有理由预期这两个文档都要匹配到查询，而在Elasticsearch中，还能做得更好。
	如果我们将短语标准化为一个基本的格式，这样我们就可以找到和用户所请求的不完全一致，但是相似程度足够的包含这个短语的文档。比如说：
	Quick可以被小写成quick。
	foxes可以被还原为词根fox。
	jumped和leap是同义词，可以被索引为相同的短语jump。
	现在索引就像这样：
	Term      Doc_1  Doc_2
	-------------------------
	brown   |   X   |  X
	dog     |   X   |  X
	fox     |   X   |  X
	in      |       |  X
	jump    |   X   |  X
	lazy    |   X   |  X
	over    |   X   |  X
	quick   |   X   |  X
	summer  |       |  X
	the     |   X   |  X
	------------------------
	不过还不够，搜索+Quick +fox还是会失败，因为我们不再有Quick短语了，但是如果我们对请求也做相同的标准化操作的话，查询就变成+quick +fox，这将会匹配到两个相同的文档。
	你只能找到索引中已经存在的短语，所以对索引的文档和查询字串都进行同样的标准化石非常重要的。
	这个分词和标准化的过程称为分析，下一节将会分析它。
