	尽管我们提到的是查询DSL，实际上DSL有两种：查询DSL或者过滤器DSL。查询子句和过滤子句在本质上很类似，但是目的上略有不同。
	过滤器是用来对每个文档做二分性判断，比如某个字段是否含有某个精确值：
	如created字段的日期是否在2013-2014之间；status字段是否包含published状态；lat_lon字段是否在指定点10km范围内之类的问题就由过滤器来判别真假。
	查询器和过滤器性质类似，它们处理的问题类似于监测文档的匹配程度大小，一个典型的查找文档的查询器应用如下：
	1：最匹配短语full text search的文档是那些
	2：包含run这个单词，但是包含runs,running,jog或者sprint也算匹配
	3：包含单词quick,brown,fox，它们之间间隔越小匹配程度越高
	4：被luncene,search或者java这类的标签标记，匹配的标记越多，匹配度越高。
	查询器会计算每个文档和查询字串之间的关联程度，然后将计算值赋值给表示关联程度的字段_score，这个接下来会被用于将文档按照关联程度进行排序。关联程度的概念和全文搜索的需求相匹配，因为很少会有一个完全正确的答案。
	大多数的过滤器的输出都是一个简单的匹配到过滤器的文档的列表，计算过程比较快，而且结果也比较容易缓存，每个文档只需要而外一个比特的内存空间，后续的请求可以方便有效的使用这些缓存。
	查询器则不单单是找到匹配的文档，它还需要计算每个文档的关联程度，这也使得查询器相比过滤器来说重的多，而且查询结果也不适合被缓存。
	幸好有反响索引，一个只匹配少数文档的查询和一个已被缓存的但是涉及许多文档的过滤器相比的甚至还有可能更快一些。正常情况下，缓存过的过滤器完胜查询器，并且其性能非常的稳定。
	使用过滤器的目的是为了减少查询器需要检测的文档数量。
	所以，除了在需要全文搜索或者有可能影响到关联分数的情况下，尽量都使用过滤器。
