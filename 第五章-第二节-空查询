	search API最基本的格式就是空搜索，它并不指定任何查询条件，只是将集群中所有的索引中所有的文档返回。
	GET /_search
	响应如下：
	{
	   "hits" : {
	      "total" :       14,
	      "hits" : [
	        {
	          "_index":   "us",
	          "_type":    "tweet",
	          "_id":      "7",
	          "_score":   1,
	          "_source": {
	             "date":    "2014-09-17",
	             "name":    "John Smith",
	             "tweet":   "The Query DSL is really powerful and flexible",
	             "user_id": 2
	          }
	       },
	        ... 9 RESULTS REMOVED ...
	      ],
	      "max_score" :   1
	   },
	   "took" :           4,
	   "_shards" : {
	      "failed" :      0,
	      "successful" :  10,
	      "total" :       10
	   },
	   "timed_out" :      false
	}
	hits:
	响应中最重要的部分就是hits，其中包含了匹配查询的文档的数量total，并且一个hits数组中包含匹配文档中的前10个。
	每个结果都包含文档的_index,_type,_id，加上_source字段。这意味着搜索结果中的文档是有效的，可以直接拿来使用。这一点和其他的搜索引擎略有不同，它们只返回文档的ID，然后要求你再通过另外的步骤获取这些文档。
	每个元素有_score字段。这是关联分数，是描述文档和查询的匹配程度的指标。默认情况下，结果会先返回关联程度最高的文档，也就是说，按照_score降序排列。这种情况下，我们并没有指定任何查询，所以所有的文档的关联程度都是相同的，因此所有的结果都有一个中立的_score值1。
	max_score这个值是文档中最高的_score值。
	took:
	这个值告诉我们整个搜索请求执行耗费了多少毫秒。
	shards:
	这个元素告诉我们整个查询过程中有多少个分片参与其中，并且显示其中成功和失败的数量分别是多少，正常情况下我们不会特别假设分片执行失败，不过这样的情况还是有可能发生的。如果我们碰到了一些异常导致基本分片和它的复制分片都丢失了话，那么就没有相应的分片的拷贝来响应搜索请求，这样的话Elasticsearch就会报告失败，但是还是会从存活的分片中获取结果并且返回。
	timeout
	这个字段告诉我们查询是否超时。默认情况下，查询请求并不会超时。如果对你来说响应时间要比完整的结果更加重要的话，你可以指定一个超时时间，比如说10或者10毫秒，或者1秒：
	GET /_search?timeout=10ms
	Elasticsearch将会在超时前将它从其它分片中已经获得数据都整理好返回给客户端。
	需要说明的是，超时字段并不会停止查询的执行；它只是告诉写作节点在超时前把已经收集到的结果返回并且关闭连接。在后台，其它分片会继续执行查询，即使结果已经被返回给客户端了。
	使用超时字段是因为需要迅速返回结果，而不是为了用来终止运行时间过长的查询。
