	查询器可以在查询上下文中使用，过滤器可以在过滤器上下文中使用。在已有的Elasticsearch API中，你都会发现query或者filter这样的参数。于是就会有这样的需求：有一种可以同时包含一个查询和过滤器子句的参数。换句话说，需要建立能包含查询上下文或过滤上下文的外部上下文。
	复合的查询子句可以将其它的查询子句包含在里面，过滤器子句也一样。但是，很多时候在查询中使用过滤器或者将全文搜索查询当作过滤器都是很有用的。
	为了实现这个功能，有专用的查询子句来包裹过滤器子句，反过来说，这使得我们可以从一个上下文切换到另一个上下文。为了构建最为有效的查询，选择正确的查询子句和过滤器子句的组合是很重要的。
	假设：
	{ "match": { "email": "business opportunity" }}
	我们想要将这个查询和下面这个短语过滤器结合的话，将会匹配只在收件箱里的文档：
	{ "term": { "folder": "inbox" }}
	search API只接受一个query参数，所以我们需要将查询和过滤器包装在另外一个查询中，这个查询叫做被过滤的（filterd）查询：
	{
	    "filtered": {
	        "query":  { "match": { "email": "business opportunity" }},
	        "filter": { "term":  { "folder": "inbox" }}
	    }
	}
	现在可以将这个查询通过查询参数传递给search API：
	GET /_search
	{
	    "query": {
	        "filtered": {
	            "query":  { "match": { "email": "business opportunity" }},
	            "filter": { "term": { "folder": "inbox" }}
	        }
	    }
	}
	在查询上下文中，如果你只想使用一个过滤器的话，那忽略查询器就可以了：
	GET /_search
	{
	    "query": {
	        "filtered": {
	            "filter":   { "term": { "folder": "inbox" }}
	        }
	    }
	}
	如果查询器没有指定的话，默认会使用match_all查询器，所以之前的查询和以下查询是等效的：
	GET /_search
	{
	    "query": {
	        "filtered": {
	            "query":    { "match_all": {}},
	            "filter":   { "term": { "folder": "inbox" }}
	        }
	    }
	}
	有时你可能会想要在一个过滤器上下文中使用查询器，这可以通过query过滤器达成，它用于包装一个查询。如下例子所示：
	GET /_search
	{
	    "query": {
	        "filtered": {
	            "filter":   {
	                "bool": {
	                    "must":     { "term":  { "folder": "inbox" }},
	                    "must_not": {
	                        "query": { //在过滤器上下文中可以使用查询器match
	                            "match": { "email": "urgent business proposal" }
	                        }
	                    }
	                }
	            }
	        }
	    }
	}
	将查询器当作过滤器来使用的情形很少，但是为了完整性还是将它包含进来。它一般只有在需要在过滤器上下文中使用全文搜索才会用得上。
