	在查询阶段的初始化过程中，查询语句会被广播到索引中所有分片的一个拷贝中（基本分片或是复制分片）。每一个分片都在其本地执行这个查询并且建立一个匹配文档的优先序列。
	一个优先序列只是一个保存了top-n个匹配文档的已排序列表。优先序列的大小取决于分页的大小和页数。比如说以下查询条件的优先序列大小至少要有100.
	GET /_search
	{
	    "from": 90,
	    "size": 10
	}
	查询阶段包含以下三个步骤：
	1.假设客户端向节点3发送一个搜索请求，这将会创建一个from+size大小的优先序列
	2.节点3将搜索请求转发给索引中所有的分片的一个拷贝上去。每个分片在本地执行这个查询并且将结果添加到优先序列中去
	3.每个分片将优先序列中的文档ID和排过序的值返回给协作节点，节点3将这些值合并值自己的优先序列中并且生成一个全局的已排序的结果列表
	当有一个请求发送到一个节点的时候，这个节点就会变成协作节点。这个节点将会把搜索请求广播给集群中的其它有关联的节点，并且负责将其它节点返回的结果整合成一个全局的已排序的结果列表然后返回给客户端。
	第一步是广播请求，这和文档的GET请求很像，搜索请求可以被任意基本分片或是它的复制分片执行。这也就是复制分片能够提升搜索性能的原因所在。一个协作节点将会使用轮询的方式来做负载均衡。
	每个分片在本地执行完查询后将文档ID和可能用于排序的值返回给协作节点，这属于比较轻量级的通讯，协作节点将这些分片级的结果合并成已排序的优先序列，到这里查询阶段就结束了。
	一个索引可能会包含1到多个基本分片，所以在单个索引中执行的搜索请求需要能够把多个分片的结果进行合并。在多个索引中执行的查询原理相同，只是参与的分片更多。
