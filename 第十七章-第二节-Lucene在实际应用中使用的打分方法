	对于多短语查询 ，Lucene使用布尔模型，tf/idf和向量空间模型并且将它们集成在一个包中用以收集匹配的文档并且对其进行打分。
	一个多短语查询示例：
	GET /my_index/doc/_search
	{
	  "query": {
	    "match": {
	      "text": "quick fox"
	    }
	  }
	}
	系统内部重写后的版本如下：
	GET /my_index/doc/_search
	{
	  "query": {
	    "bool": {
	      "should": [
	        {"term": { "text": "quick" }},
	        {"term": { "text": "fox"   }}
	      ]
	    }
	  }
	}
	布尔查询实现了布尔模型，在这个例子中，查询将会匹配包含quick或者fox或者都包含的文档。一旦文档匹配了查询，Lucene将会按照这个查询来计算文档的得分，并且将各个匹配的短语的得分整合在一起。用于打分的方程式被称作是实用打分方程。
	score(q,d)  =  //文档d对查询q的打分
	            queryNorm(q)  //查询规范化参数
	          · coord(q,d)    //协作参数
	          · ∑ (           //求和
	                tf(t in d)   //tf
	              · idf(t)²      //idf平方
	              · t.getBoost() //短语权重提升
	              · norm(t,d)    //字段长度规范化
	            ) (t in q)   
	 查询规范化参数是对查询进行规范化尝试，这样的查询的结果和另外的查询结果就可以相互比较了。不过它的效果不佳，关联得分的唯一用处就是用于排序，所以对于不同的查询进行比较其实没有意义。这个参数在查询的开端被计算，实际的计算结果取决于加入比较的查询，不过典型的实现如下：
	 queryNorm = 1 / √sumOfSquaredWeights //这个值由查询字串中的每个短语的idf相加得到
	 相同的规范化参数将会被每个文档应用并且无法修改。
	 协作参数被用于提升对查询短语包含比例更高的文档得分，文档中查询短语出现的越多，文档更加匹配的可能性就越高。想象一下查询quick brown fox，每个短语的权重都是1.5.如果没有协作参数，得分就将会是文档中短语的权重之和，比如：
	 Document with fox → score: 1.5
	 Document with quick fox → score: 3.0
	 Document with quick brown fox → score: 4.5
	 协作参数将文档中匹配的短语的数量相乘然后处于查询中短语的总数：
	 Document with fox → score: 1.5 * 1 / 3 = 0.5
	 Document with quick fox → score: 3.0 * 2 / 3 = 2.0
	 Document with quick brown fox → score: 4.5 * 3 / 3 = 4.5
	 协作参数导致的结果就是包含短语多的文档得分将会相对高得多。需要注意的是，查询会被重写为以下格式：
	 GET /_search
	{
	  "query": {
	    "bool": {
	      "should": [
	        { "term": { "text": "quick" }},
	        { "term": { "text": "brown" }},
	        { "term": { "text": "fox"   }}
	      ]
	    }
	  }
	}
	bool查询默认对所有should子句使用协作参数，不过这个参数是可以被禁止的。在某些情况下，禁止协作参数是有意义的，想象一下查找同义词jump,leap,hop，这些词到底出现了多少次并不会使文档有区别，因为它们意思一样。实际上，最好只出现同义词中的一个：
	GET /_search
	{
	  "query": {
	    "bool": {
	      "disable_coord": true,
	      "should": [
	        { "term": { "text": "jump" }},
	        { "term": { "text": "hop"  }},
	        { "term": { "text": "leap" }}
	      ]
	    }
	  }
	}
	当使用同义词的时候，内部的实现流程是这样的：重写过后的查询禁用了协作参数。
	在接下来的章节会谈谈如何在查询阶段提升一个字段的权重。在索引阶段也可以做相同的操作，这样的提升是对字段内的所有短语生效的，而不是对字段本身进行提升。
	为了在索引中存储提升权重的配置值而又不浪费太多的空间，索引阶段字段级别的权重提升还绑定了字段长度规范化，并且在索引中按照一个字节的长度进行存储。这个值由norm(t,d)返回。
	我们强烈建议不要使用索引阶段的字段级别的权重提升，因为：
	1.权重提升和字段长度规范化联合存储到一个字节中意味着字段长度规范会的精准度降低了。结果就是Elasticsearch无法区分一个包含了3个单词的字段和一个包含了5个单词的字段的区别。
	2.如果要修改索引阶段的权重提升，必须要重新索引索引中的文档。而查询阶段的权重提升则可以随时改变。
	3.如果查询阶段的权重提升对象字段有多个值，那么权重将会是字段所包含的每个值的乘积，这将极大的提升该字段的权重。
	所以查询阶段的权重提升更为简单，干净，也更为方便。
	
