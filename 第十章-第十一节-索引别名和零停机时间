	前文所说的重建索引的问题在于要更新应用中使用的索引名称。这个问题可以使用索引别名来解决。
	索引别名类似于快捷方式或是外露的链接，它指向一个或多个索引，并且可以用于任意一个需要使用索引名称作为参数的API。别名这个机制带了许多的便利，比如：
	1.在一个正在运行的集群上透明的转换索引
	2.将多个索引进行分组
	3.对一个索引中的子集生成相应的视图
	后续会详细介绍如何使用别名。本节会解释怎么使用别名来切换旧的索引和新的索引而不用停机。
	有两个终节点可以管理别名：_alias用于处理单个操作，_aliases用于处理多个操作
	在这个场景下，我们会假设应用与my_index这个索引通信。实际上，my_index是某些真实的索引的别名，我们会在真实的索引名称中加入版本号：my_index_v1，my_index_v2等等。
	开始阶段先要创建一个my_index_v1的索引，然后将它的别名设置为my_index:
	PUT /my_index_v1 
	PUT /my_index_v1/_alias/my_index 
	你可以检查别名指向的索引：
	GET /*/_alias/my_index
	或者索引绑定的别名：
	GET /my_index_v1/_alias/*
	返回的响应是一样的：
	{
	    "my_index_v1" : {
	        "aliases" : {
	            "my_index" : { }
	        }
	    }
	}
	稍后我们决定要修改索引中的一个字段的映射表。修改已有的映射表当然是不行的，所以要重新索引这部分的数据。在开始做这个之前，先要创建一个有新映射表的索引:my_index_v2:
	PUT /my_index_v2
	{
	    "mappings": {
	        "my_type": {
	            "properties": {
	                "tags": {
	                    "type":   "string",
	                    "index":  "not_analyzed"
	                }
	            }
	        }
	    }
	}
	然后将my_index_v1的数据重新索引到my_index_v2中，一旦重新索引完毕，我们就可以将别名指向新的索引。
	一个别名可以指向多个索引，所以同时需要在别名中移除旧的索引。这个修改需要符合原子性要求，这意味着必须要使用_aliases终节点。
	POST /_aliases
	{
	    "actions": [
	        { "remove": { "index": "my_index_v1", "alias": "my_index" }},
	        { "add":    { "index": "my_index_v2", "alias": "my_index" }}
	    ]
	}
	这样的话应用就在不需要停机的情况下切换了索引。
	即使你认为当前的索引设计的很完美，有时候还是有可能需要在生产环境修改它的。需要预先准备的是在应用中使用索引的别名，这样才能随时重新索引，别名的消耗很少，并且最好都使用它。
