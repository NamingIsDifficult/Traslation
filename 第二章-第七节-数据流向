	不管写什么样的程序，目的是一致的：组织数据让它们服务于我们的目标。但是数据并不仅仅是由随机的字节构成的，我们在数据之间建立关联，以此来展示实体或是现实世界里的东西。如果知道一个名字与一个邮件地址同属于一个人的话，其中蕴含的信息要比不知道来的多得多。
	在实际应用中，同一类型的实体并不是都看起来一样的，其中一个可能只有移动电话号码，而另外一个却只有家庭电话号码，还有一个可能都有。
	面向对象编程语言之所有这么流行的一大原因就是因为它可以帮助我们使用复杂的数据结构来表达和操作现实世界中的实体。到现在为止，这个概念还是很棒的。
	但当我们需要存储这些数据的时候，麻烦来了，传统的存储方式是将数据存储到行列结构的关系型数据库中，和表一样。对象带来的各种便利也因为存储介质的不方便而丢失。
	但是如果可以将对象以对象的方式存储的话会怎样呢?这样就可以将关注点从把应用程序在表上建模转移到单纯的使用数据。这样面向对象的好处就回来了。
	一个对象是一个视语言而定的，生存在内存里的数据结构。要把它在网络中传播或是存储的话，我们需要能见将它们表示成一些通用的模式。JSON是一种使用人类可读的文本来展示对象的方法，它已经是NoSQL世界里实际上的数据交换标准。当一个对象被序列化为JSON的时候，它就被当作是一个JSON文档。
	Elasticsearch使用的是分布式文档存储。它可以实时的存储和获取复杂的数据结构，即被序列化成JSON的文档，换句话说，文档一旦被存储到Elasticsearch中，就可以通过集群中的任意节点获取到它。
	当然，我们可不仅仅需要存储数据，我们还要可以快速一致的查询它们，当NoSQL解决方案支持我们用文档的形式来存储对象的时候，我们仍旧需要思考我们将用怎样的方式来查询数据，那些域需要做索引来使得数据获取的更加迅速。
	在Elasticsearch中，默认情况下所有的域都是被索引了的。也就是说，每一个索引都有一个专用的倒排索引来加速获取。而且，和大多数的数据库不同，它可以在一次查询中使用到所有的倒排索引，并且在呼吸间就把结果返回。
	在这个章节里，我们展示了创建、获取、更新、删除文档的API。现在，我们并不关心文档中的数据或是怎么查询它们。我们只关心怎么安全的将数据存储到Elasticsearch里面，在原样拿出来。
