	目前为止我们接触的针对数字的操作均是对精确的数值的处理。实际应用中，按照范围来过滤更为常用，Elasticsearch中的范围(range)过滤器可以实现这个功能：
	"range" : {
	    "price" : {
	        "gt" : 20,
	        "lt" : 40
	    }
	}
	范围过滤器通过以下选项支持范围内和范围外的定义：
	gt:大于
	lt:小于
	gte:大于或者等于
	lte:小于或者等于
	举例来说:
	GET /my_store/products/_search
	{
	    "query" : {
	        "filtered" : {
	            "filter" : {
	                "range" : {
	                    "price" : {
	                        "gte" : 20,
	                        "lt"  : 40
	                    }
	                }
	            }
	        }
	    }
	}
	对于半开半闭区间的查询：
	"range" : {
	    "price" : {
	        "gt" : 20
	    }
	}
	对于日期的限制也相同：
	"range" : {
	    "timestamp" : {
	        "gt" : "2014-01-01 00:00:00",
	        "lt" : "2014-01-07 00:00:00"
	    }
	}
	在日期字段上，范围过滤器支持日期的数学运算。举例来说，如果想要找出所有时间戳在最近一个小时的文档：
	"range" : {
	    "timestamp" : {
	        "gt" : "now-1h"
	    }
	}
	过滤器将会在文档中的时间戳字段上执行一个滑动窗口找出相应的文档。日期的数学操作也可以在实际日期上应用，而不仅仅是作为一个占位符出现，只需在日期后面添加两个竖线在加上数学表达式即可：
	"range" : {
	    "timestamp" : {
	        "gt" : "2014-01-01 00:00:00",
	        "lt" : "2014-01-01 00:00:00||+1M" 
	    }
	}
	范围过滤器也可以应用在字符串字段上。字符串范围是按照字典编撰或是字母表的顺序来计算的。下例是按照字典编撰顺序排列的：
	5, 50, 6, B, C, a, ab, abb, abc, b
	短语在反向索引中是按照字典编撰的顺序排序的，所以范围过滤器也使用这个顺序。
	"range" : {
	    "title" : {
	        "gte" : "a",
	        "lt" :  "b"
	    }
	}
	这里需要注意基数，数字和日期的索引方式使得它们容易被计算范围。但是字符串不一样，为了在字符串上应用范围过滤,Elasticsearch为指定范围的每一个短语都执行了一个短语过滤器，这比在数字和日期字段上执行范围过滤要慢的多。所以如果字符串字段包含过多的短语的话，范围过滤就会很慢。
