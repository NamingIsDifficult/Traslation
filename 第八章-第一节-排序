	为了能通过关联程度来排序，我们需要将关联程度量化。在Elasticsearch中，关联度评分是用浮点数来表示的，在搜索结果中以_score字段返回，所以默认的排序是按照_score降序。
	有时候你可能没有特别好用来表示关联程度的字段，比如，下面的查询仅仅返回user_id字段为1的文档：
	GET /_search
	{
	    "query" : {
	        "filtered" : {
	            "filter" : {
	                "term" : {
	                    "user_id" : 1
	                }
	            }
	        }
	    }
	}
	过滤器对_score字段没有作用，而默认的match_all查询器也不过是将所有文档的关联分都打1.换句话说，所有文档都被认为具有相等的关联程度。
	在这个例子中，按照文档的鲜度来排序说不定是一个好办法，最新的文档那个排在第一位。我们可以通过sort参数来达成：
	GET /_search
	{
	    "query" : {
	        "filtered" : {
	            "filter" : { "term" : { "user_id" : 1 }}
	        }
	    },
	    "sort": { "date": { "order": "desc" }}
	}
	在结果中有两处比起之前的响应不同：
	"hits" : {
	    "total" :           6,
	    "max_score" :       null, //没有计算评分_score
	    "hits" : [ {
	        "_index" :      "us",
	        "_type" :       "tweet",
	        "_id" :         "14",
	        "_score" :      null, 
	        "_source" :     {
	             "date":    "2014-09-24",
	             ...
	        },
	        "sort" :        [ 1411516800000 ] //date字段在这里用毫秒数来表示，作为排序的参数使用
	    },
	    ...
	}
	第一个不同之处就是每个结果中出现了一个新的元素:sort，其中包含了排序需要使用的值。在这个例子中，使用date来排序，在内部，这个字段被索引成毫秒数。
	第二个不同之处就是_score和max_score字段都是null。计算评分的代价是很昂贵的，而评分通常是用来排序用的；我们并不是用关联程度来排序，所以继续跟踪评分就没有意义了。如果你不论如何都要计算评分的，可以设置track_scores参数为true。
	有一种快捷方式来指定要按照那个字段来排序：
	 "sort": "number_of_children"
	 字段将会默认按照升序排序，而评分按照降序
	 或许我们会想要构建这样的一个查询：按照日期排序和按照评分排序相结合，并且首先先按日期排序，再按关联程度排序：
	 GET /_search
	{
	    "query" : {
	        "filtered" : {
	            "query":   { "match": { "tweet": "manage text search" }},
	            "filter" : { "term" : { "user_id" : 2 }}
	        }
	    },
	    "sort": [
	        { "date":   { "order": "desc" }},
	        { "_score": { "order": "desc" }}
	    ]
	}
	排序是很重要的。结构按照第一个标准先排序，只有第一个排序字段的值是相同的结果会被第二个标准排序，以此类推。
	多级排序不需要_score字段参与。你可以按照多个不同的字段排序。
	挡在多个拥有多个值的字段上排序的时候，谨记字段中的多个值的顺序是不固定；一个多值的字段不过是多个值的集合。那么使用哪个值来排序呢？
	对于数字和日期，你可以将多值字段通过min,max,avg,sum等排序模式来选择一个值。比如可以通过下面的查询来选出日期字段中最早的时间：
	"sort": {
	    "dates": {
	        "order": "asc",
	        "mode":  "min"
	    }
	}
